name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'

permissions:
  contents: read
  id-token: write

jobs:
  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - uses: dtolnay/rust-toolchain@1.83
        with:
          components: rustfmt, clippy
      - uses: pre-commit/action@v3.0.1

  # single python version because we use an abi3 wheel that works for 3.7+
  # and the workflow would fail if multiple jobs try to upload the same artifact
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        python-version: ["3.7"]
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@1.83
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          working-directory: pyext
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: pyext/dist
      - name: pytest
        if: matrix.platform.target == 'x86_64'
        run: |
          export INSTALL_ARGS="--find-links dist --no-index --force-reinstall prunepytest"
          ./runtests.sh

  linux-coverage:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        python-version: ["3.7"]
        platform:
          - runner: ubuntu-latest
            target: x86_64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@1.83
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov, cargo-nextest
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --out dist
          working-directory: pyext
          sccache: 'true'
          manylinux: auto
      - name: pytest
        run: |
          RUST_COVER=1 ./runtests.sh
      # TODO upload rust coverage results

  linux-native:
    runs-on: ${{ matrix.platform.runner }}
    needs: [linux]
    strategy:
      matrix:
        python-version: [ "3.9", "3.12", "3.13" ]
        platform:
          - runner: ubuntu-latest
            target: x86_64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: pyext/dist
      - name: pytest
        run: |
          export INSTALL_ARGS="--find-links dist --no-index --force-reinstall prunepytest"
          ./runtests.sh

  linux-docker:
    runs-on: ${{ matrix.platform.runner }}
    needs: [linux]
    strategy:
      matrix:
        python-version: [ "3.9", "3.12", "3.13" ]
        platform:
          - runner: ubuntu-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: pyext/dist
      - uses: uraimo/run-on-arch-action@v2.8.1
        name: pytest-docker
        with:
          arch: ${{ matrix.platform.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          install: |
            set -e
            apt-get update
            apt-get install -y --no-install-recommends curl ca-certificates
            curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=/usr/bin sh
            uv python install ${{ matrix.python-version }}
          run: |
            set -e
            export INSTALL_ARGS="--find-links dist --no-index --force-reinstall prunepytest"
            PY_COVERAGE=0 ./runtests.sh

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        python-version: ["3.7"]
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.target }}
      - uses: dtolnay/rust-toolchain@1.83
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          working-directory: pyext
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: pyext/dist
      - name: pytest
        working-directory: pyext
        run: |
          $ErrorActionPreference = 'Stop'
          $PSNativeCommandUseErrorActionPreference = $true
          python3 -m venv .venv --symlinks
          .venv\Scripts\Activate.ps1
          python -m pip install --find-links dist --no-index --force-reinstall prunepytest
          python -m pip install pytest
          python -m pytest --rootdir python

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        python-version: ["3.9"]
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@1.83
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          working-directory: pyext
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: pyext/dist
      - name: pytest
        run: |
          export INSTALL_ARGS="--find-links dist --no-index --force-reinstall prunepytest"
          ./runtests.sh


  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
#      - name: Generate artifact attestation
#        uses: actions/attest-build-provenance@v1
#        with:
#          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
